name: Test and Lint

on:
  push:
    branches: [ main, develop, staging ]
    tags:
      - 'prod-*'
  pull_request:
    branches: [ main, develop, staging ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgis/postgis:17-3.4
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.3.9'
        bundler-cache: true

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client

    - name: Set up database
      env:
        DATABASE_URL: postgis://postgres:postgres@localhost:5432/breathesafe_test
      run: |
        bundle exec rails db:create
        # Enable PostGIS extension
        PGPASSWORD=postgres psql -h localhost -U postgres -d breathesafe_test -c "CREATE EXTENSION IF NOT EXISTS postgis;"
        # Run migrations instead of schema:load to ensure PostGIS is properly set up
        bundle exec rails db:migrate

    - name: Run tests
      env:
        DATABASE_URL: postgis://postgres:postgres@localhost:5432/breathesafe_test
        RAILS_ENV: test
      run: |
        bundle exec rspec spec

  lint:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.3.9'
        bundler-cache: true

    - name: Run RuboCop
      run: |
        bundle exec rubocop --parallel

  python-tests:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        set -euo pipefail
        # Install Miniforge (stable link pattern)
        URL_BASE="https://github.com/conda-forge/miniforge/releases/latest/download"
        INSTALLER="Miniforge3-$(uname)-$(uname -m).sh"
        wget -O Miniforge.sh "$URL_BASE/$INSTALLER"
        bash Miniforge.sh -b -p "$HOME/miniforge"
        source "$HOME/miniforge/bin/activate"
        conda config --set always_yes yes --set changeps1 no
        conda update -n base -c conda-forge conda

        # Create environment for Random Forest
        conda env create -f python/mask_recommender/random_forest/environment.yml || conda env update -f python/mask_recommender/random_forest/environment.yml
        conda activate mask_recommender_rf

    - name: Run Python tests (inference + random_forest)
      env:
        PYTHONPATH: ${{ github.workspace }}
      run: |
        set -euo pipefail
        source "$HOME/miniforge/bin/activate"
        conda activate mask_recommender_rf
        python -m pytest \
          python/mask_recommender/random_forest/tests \
          -v
