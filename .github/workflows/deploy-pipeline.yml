name: Deploy Pipeline

on:
  workflow_run:
    workflows: ["Test and Lint"]
    types:
      - completed

jobs:
  # Job 2: Deploy to staging (only on development branch pushes, not PRs)
  deploy-staging:
    runs-on: ubuntu-latest
    if: >-
      ${{ github.event.workflow_run.conclusion == 'success' &&
          github.event.workflow_run.head_branch == 'main' }}
    environment: staging

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.3.9'
        bundler-cache: true

    - name: Deploy to Heroku Staging
      env:
        HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        HEROKU_APP: ${{ secrets.HEROKU_STAGING_APP }}
      run: |
        # Install Heroku CLI
        curl https://cli-assets.heroku.com/install.sh | sh

        # Login to Heroku
        echo $HEROKU_API_KEY | heroku auth:token --stdin

        # Deploy to staging
        git push -f https://heroku:$HEROKU_API_KEY@git.heroku.com/$HEROKU_APP.git HEAD:main

        # Run migrations
        heroku run rails db:migrate --app $HEROKU_APP

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION || 'us-east-1' }}

    - name: Set up Python for Lambda deployment
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Python dependencies
      run: |
        # Install Miniconda using a more reliable method
        curl -L -O "https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh"
        bash Miniconda3-latest-Linux-x86_64.sh -b -p $HOME/miniconda
        source $HOME/miniconda/bin/activate

        # Create environment from environment.yml
        conda env create -f python/mask_recommender/inference/environment.yml
        source activate mask-recommender-inference

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Send staging deployment success notification
      uses: dawidd6/action-send-mail@v3
      if: success()
      with:
        server_address: smtp.gmail.com
        server_port: 587
        secure: false
        username: ${{ secrets.EMAIL_USERNAME }}
        password: ${{ secrets.EMAIL_PASSWORD }}
        subject: "Staging Deployment Successful - Development Branch"
        to: ${{ secrets.NOTIFICATION_EMAIL }}
        from: ${{ secrets.EMAIL_USERNAME }}
        body: |
          Staging deployment completed successfully from development branch.

          Deployed components:
          - Heroku app: ${{ secrets.HEROKU_STAGING_APP }}
          - Lambda deployments: Temporarily disabled (ECR permissions issue)

          Database: Cloned from production
          Migrations: Applied successfully

    - name: Send staging deployment failure notification
      uses: dawidd6/action-send-mail@v3
      if: failure()
      with:
        server_address: smtp.gmail.com
        server_port: 587
        secure: false
        username: ${{ secrets.EMAIL_USERNAME }}
        password: ${{ secrets.EMAIL_PASSWORD }}
        subject: "Staging Deployment Failed - Development Branch"
        to: ${{ secrets.NOTIFICATION_EMAIL }}
        from: ${{ secrets.EMAIL_USERNAME }}
        body: |
          Staging deployment failed from development branch.

          Check the GitHub Actions logs for details.

  # Job 3: Deploy to production (only after successful staging deployment)
  deploy-production:
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: ${{ github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'main' }}
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.3.9'
        bundler-cache: true

    - name: Deploy to Heroku Production
      env:
        HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        HEROKU_APP: ${{ secrets.HEROKU_PRODUCTION_APP }}
      run: |
        # Install Heroku CLI
        curl https://cli-assets.heroku.com/install.sh | sh

        # Login to Heroku
        echo $HEROKU_API_KEY | heroku auth:token --stdin

        # Deploy to production
        git push -f https://heroku:$HEROKU_API_KEY@git.heroku.com/$HEROKU_APP.git HEAD:main

        # Run migrations
        heroku run rails db:migrate --app $HEROKU_APP

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION || 'us-east-1' }}

    - name: Set up Python for Lambda deployment
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Python dependencies
      run: |
        # Install Miniconda using a more reliable method
        curl -L -O "https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh"
        bash Miniconda3-latest-Linux-x86_64.sh -b -p $HOME/miniconda
        source $HOME/miniconda/bin/activate

        # Create environment from environment.yml
        conda env create -f python/mask_recommender/inference/environment.yml
        source activate mask-recommender-inference

    - name: Send production deployment success notification
      uses: dawidd6/action-send-mail@v3
      if: success()
      with:
        server_address: smtp.gmail.com
        server_port: 587
        secure: false
        username: ${{ secrets.EMAIL_USERNAME }}
        password: ${{ secrets.EMAIL_PASSWORD }}
        subject: "Production Deployment Successful - Development Branch"
        to: ${{ secrets.NOTIFICATION_EMAIL }}
        from: ${{ secrets.EMAIL_USERNAME }}
        body: |
          Production deployment completed successfully from development branch.

          Deployed components:
          - Heroku app: ${{ secrets.HEROKU_PRODUCTION_APP }}
          - Inference Lambda: mask-recommender-inference-production
          - Training Lambda: mask-recommender-training-production

          Migrations: Applied successfully

    - name: Send production deployment failure notification
      uses: dawidd6/action-send-mail@v3
      if: failure()
      with:
        server_address: smtp.gmail.com
        server_port: 587
        secure: false
        username: ${{ secrets.EMAIL_USERNAME }}
        password: ${{ secrets.EMAIL_PASSWORD }}
        subject: "Production Deployment Failed - Development Branch"
        to: ${{ secrets.NOTIFICATION_EMAIL }}
        from: ${{ secrets.EMAIL_USERNAME }}
        body: |
          Production deployment failed from development branch.

          Check the GitHub Actions logs for details.
