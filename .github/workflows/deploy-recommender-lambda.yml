name: Deploy Recommender Lambda

on:
  push:
    branches: [ main ]
    paths:
      - 'python/mask_recommender/random_forest/**'
      - '.github/workflows/deploy-recommender-lambda.yml'
    tags:
      - 'prod-*'
  workflow_dispatch:
    inputs:
      target_env:
        description: "Environment to deploy (staging|production)"
        required: false
        default: "staging"

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: mask-recommender

jobs:
  build-and-push:
    name: Build and push image to ECR
    runs-on: ubuntu-latest
    environment: staging
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure Test and Lint passed for this commit
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const sha = context.sha;
            const { data } = await github.rest.actions.listWorkflowRunsForRepo({ owner, repo, per_page: 50, status: 'success' });
            const ok = data.workflow_runs.some(w => w.head_sha === sha && w.name === 'Test and Lint' && w.conclusion === 'success');
            if (!ok) {
              core.setFailed('Blocking deploy: Test and Lint has not succeeded for this commit.');
            }

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION || env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image
        id: build-image
        env:
          REGISTRY: ${{ steps.ecr-login.outputs.registry }}
          REPO: ${{ env.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          set -euo pipefail
          # Skip if no RF changes on push
          if [ "${{ github.event_name }}" = "push" ]; then
            if ! git diff --name-only ${{ github.sha }}^ ${{ github.sha }} | grep -E '^python/mask_recommender/random_forest/'; then
              echo "No RF changes detected; skipping image build/push."; echo "image_uri_sha=" >> $GITHUB_OUTPUT; echo "image_uri_latest=" >> $GITHUB_OUTPUT; exit 0; fi; fi
          IMAGE_URI="$REGISTRY/$REPO:$IMAGE_TAG"
          LATEST_URI="$REGISTRY/$REPO:latest"

          # Ensure repository exists
          aws ecr describe-repositories --repository-names "$REPO" >/dev/null 2>&1 || \
            aws ecr create-repository --repository-name "$REPO" >/dev/null

          # Build Random Forest lambda image
          docker build \
            -f python/mask_recommender/random_forest/Dockerfile \
            -t "$IMAGE_URI" \
            -t "$LATEST_URI" \
            python/mask_recommender

          docker push "$IMAGE_URI"
          docker push "$LATEST_URI"

          echo "image_uri_sha=$IMAGE_URI" >> $GITHUB_OUTPUT
          echo "image_uri_latest=$LATEST_URI" >> $GITHUB_OUTPUT
    outputs:
      image_uri_sha: ${{ steps.build-image.outputs.image_uri_sha }}
      image_uri_latest: ${{ steps.build-image.outputs.image_uri_latest }}

  deploy-staging:
    name: Deploy to staging
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: staging
    if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.target_env == 'staging')
    permissions:
      contents: read
    steps:
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION || env.AWS_REGION }}

      - name: Update Lambda code (staging)
        env:
          FUNCTION_NAME: mask-recommender-staging
          IMAGE_URI: ${{ needs.build-and-push.outputs.image_uri_latest }}
          AWS_REGION: ${{ env.AWS_REGION }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
        run: |
          set -euo pipefail
          if [ -z "${IMAGE_URI:-}" ]; then echo "No image built; skipping deploy."; exit 0; fi
          if [ -z "${IMAGE_URI:-}" ] || ! echo "$IMAGE_URI" | grep -q '\.'; then
            ACCOUNT=$(aws sts get-caller-identity --query Account --output text)
            IMAGE_URI="${ACCOUNT}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY}:latest"
            echo "Derived IMAGE_URI=${IMAGE_URI}"
          fi
          aws lambda update-function-code \
            --function-name "$FUNCTION_NAME" \
            --image-uri "$IMAGE_URI" \
            >/dev/null

      - name: Wait for Lambda to finish updating (staging)
        env:
          FUNCTION_NAME: mask-recommender-staging
        run: |
          set -euo pipefail
          aws lambda wait function-updated --function-name "$FUNCTION_NAME"

      - name: Update Lambda environment (staging)
        env:
          FUNCTION_NAME: mask-recommender-staging
          AWS_REGION: ${{ env.AWS_REGION }}
        run: |
          set -euo pipefail
          CFG=$(aws lambda get-function-configuration --function-name "$FUNCTION_NAME")
          ENV_VARS=$(echo "$CFG" | jq -r '.Environment.Variables // {}')
          MERGED=$(echo "$ENV_VARS" | jq '. + {ENVIRONMENT:"staging", S3_BUCKET_REGION: '"'"$AWS_REGION"'"'}')
          printf '{"Variables":%s}' "$MERGED" > env.json
          aws lambda update-function-configuration \
            --function-name "$FUNCTION_NAME" \
            --environment file://env.json \
            >/dev/null

  deploy-production:
    name: Deploy to production
    needs: build-and-push
    environment: production
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/prod-') || (github.event_name == 'workflow_dispatch' && github.event.inputs.target_env == 'production')
    permissions:
      contents: read
    steps:
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION || env.AWS_REGION }}

      - name: Update Lambda code (production)
        env:
          FUNCTION_NAME: mask-recommender-production
          IMAGE_URI: ${{ needs.build-and-push.outputs.image_uri_sha }}
          AWS_REGION: ${{ env.AWS_REGION }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
          GITHUB_SHA: ${{ github.sha }}
        run: |
          set -euo pipefail
          if [ -z "${IMAGE_URI:-}" ]; then echo "No image built; skipping deploy."; exit 0; fi
          if [ -z "${IMAGE_URI:-}" ] || ! echo "$IMAGE_URI" | grep -q '\.'; then
            ACCOUNT=$(aws sts get-caller-identity --query Account --output text)
            IMAGE_URI="${ACCOUNT}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY}:${GITHUB_SHA}"
            echo "Derived IMAGE_URI=${IMAGE_URI}"
          fi
          aws lambda update-function-code \
            --function-name "$FUNCTION_NAME" \
            --image-uri "$IMAGE_URI" \
            >/dev/null

      - name: Wait for Lambda to finish updating (production)
        env:
          FUNCTION_NAME: mask-recommender-production
        run: |
          set -euo pipefail
          aws lambda wait function-updated --function-name "$FUNCTION_NAME"

      - name: Update Lambda environment (production)
        env:
          FUNCTION_NAME: mask-recommender-production
          AWS_REGION: ${{ env.AWS_REGION }}
        run: |
          set -euo pipefail
          CFG=$(aws lambda get-function-configuration --function-name "$FUNCTION_NAME")
          ENV_VARS=$(echo "$CFG" | jq -r '.Environment.Variables // {}')
          MERGED=$(echo "$ENV_VARS" | jq '. + {ENVIRONMENT:"production", S3_BUCKET_REGION: '"'"$AWS_REGION"'"'}')
          printf '{"Variables":%s}' "$MERGED" > env.json
          aws lambda update-function-configuration \
            --function-name "$FUNCTION_NAME" \
            --environment file://env.json \
            >/dev/null
